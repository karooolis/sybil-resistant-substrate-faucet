import { useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import LoginButton from "../components/login-btn";
import { isValidAddress } from "../utils/isValidAddress";

const Home: NextPage = () => {
  const [address, setAddress] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);

  /**
   * Process faucet drip request
   */
  const processDrip = async () => {
    // Toggle loading
    setLoading(true);

    try {
      fetch("/api/claim/new", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ address }),
      });
    } catch (error: unknown) {
      console.log("error", error);
    }

    // try {
    //   // Post new claim with recipient address
    //   await axios.post("/api/claim/new", { address, others: claimOther });
    //   // Toast if success + toggle claimed
    //   toast.success("Tokens dispersedâ€”check balances shortly!");
    //   setClaimed(true);
    //   setFirstClaim(true);
    // } catch (error: any) {
    //   // If error, toast error message
    //   toast.error(error.response.data.error);
    // }

    // Toggle loading
    setLoading(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <input
          type="text"
          placeholder="SOME ADDRESS"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
        />

        {isValidAddress(address) ? (
          // If address is valid, allow claiming
          <button onClick={processDrip} disabled={loading}>
            {!loading ? "Claim" : "Claiming ..."}
          </button>
        ) : (
          // Else, force to fix address
          <button disabled>
            {address === "" ? "Enter valid address" : "Invalid address"}
          </button>
        )}

        <LoginButton />
      </main>

      {/* <main className={styles.main}>
        <Button />

        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer> */}
    </div>
  );
};

export default Home;
